plugins {
    id 'java'
    id 'com.gradleup.shadow' version "8+"
}

group = 'me.f0reach.holofans.auth'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url "https://repo.erdbeerbaerlp.de/repository/maven-public/" }
    maven { url "https://repo.dmulloy2.net/repository/public/" }
    maven { url "https://repo.fancyplugins.de/releases" }
    mavenLocal()
}

configurations {
    embed
    compileOnly.extendsFrom(embed)
    testImplementation.extendsFrom(embed)
}

shadowJar {
    archiveClassifier = ""
    configurations = [project.configurations.embed]
    exclude('META-INF/services/**')
    relocate "com.twitter", "me.f0reach.holofans.auth.deps.twitter"
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly 'de.erdbeerbaerlp:dcintegration.common:3.0.7'
    compileOnly 'com.comphenix.protocol:ProtocolLib:5.1.0'
    compileOnly 'de.oliver:FancyHolograms:2.4.2'
    compileOnly group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
    embed "com.twitter:twitter-api-java-sdk:2.0.3"
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

def paperJarName = 'paper-' + paperVersion + '-' + paperBuild + '.jar'

tasks.register('copyPluginToDevServer') {
    dependsOn 'build'
    group 'Local Development'
    doLast {
        copy {
            from 'build/libs/' + pluginName + '-' + project.version + '.jar'
            into '.server/plugins'
        }
    }
}
tasks.register('downloadServerSoftware') {
    group 'Local Development'
    doLast {
        def serverDirPath = projectDir.toString() + '/.server'
        def serverDir = new File(serverDirPath)
        if (!serverDir.exists()) {
            serverDir.mkdir()
        }

        def serverJarPath = serverDirPath + "/" + paperJarName
        def serverJar = new File(serverJarPath)
        if (!serverJar.exists()) {
            ant.get(
                    src: 'https://api.papermc.io/v2/projects/paper/versions/' +
                            paperVersion + '/builds/' + paperBuild + '/downloads/' +
                            paperJarName,
                    dest: serverJarPath
            )
        }
        new File(serverDirPath + '/eula.txt').write('eula=true')
    }
}
tasks.register('runDevServer') {
    group 'Local Development'
    dependsOn = [
            downloadServerSoftware,
            build,
            copyPluginToDevServer
    ]
    doLast {
        exec {
            workingDir '.server'
            commandLine 'java', '-jar', paperJarName, 'nogui'
        }
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
